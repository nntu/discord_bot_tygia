use poise::serenity_prelude as serenity;
use chrono::Local;
use dotenv::dotenv;
use image::ImageBuffer;
use screenshots::Screen;
use std::{env, path::Path, fs};
use log::{info, error};

struct Data {} // User data, which is stored and accessible in all command invocations
type Error = Box<dyn std::error::Error + Send + Sync>;
type Context<'a> = poise::Context<'a, Data, Error>;

/// L·ªánh !tygia - ch·ª•p m√†n h√¨nh v√† g·ª≠i k√®m th·ªùi gian
#[poise::command(prefix_command, slash_command = false)]
async fn tygia(ctx: Context<'_>) -> Result<(), Error> {
    info!("Nh·∫≠n l·ªánh !tygia t·ª´ user {}", ctx.author().name);
    
    // Ch·ª•p m√†n h√¨nh
    info!("ƒêang ch·ª•p m√†n h√¨nh...");
    let screens = Screen::all()
        .map_err(|e| {
            error!("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√†n h√¨nh: {}", e);
            format!("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√†n h√¨nh: {}", e)
        })?;
    let screen = screens.get(0)
        .ok_or_else(|| {
            error!("Kh√¥ng t√¨m th·∫•y m√†n h√¨nh");
            "Kh√¥ng t√¨m th·∫•y m√†n h√¨nh"
        })?;
    
    let image = screen.capture()
        .map_err(|e| {
            error!("Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh: {}", e);
            format!("Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh: {}", e)
        })?;
    
    let width = image.width();
    let height = image.height();
    info!("ƒê√£ ch·ª•p m√†n h√¨nh v·ªõi k√≠ch th∆∞·ªõc {}x{}", width, height);
    
    let samples = image.as_flat_samples();
    let rgba = samples.as_slice().to_vec();

    // T·∫°o buffer ·∫£nh
    let buffer: ImageBuffer<image::Rgba<u8>, _> = ImageBuffer::from_raw(width, height, rgba)
        .ok_or_else(|| {
            error!("Kh√¥ng th·ªÉ t·∫°o buffer ·∫£nh");
            "Kh√¥ng th·ªÉ t·∫°o buffer ·∫£nh"
        })?;

    // L∆∞u ·∫£nh t·∫°m th·ªùi
    let path = Path::new("screenshot.png");
    info!("ƒêang l∆∞u ·∫£nh v√†o {}", path.display());
    buffer.save(path)?;

    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    let now = Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
    info!("Th·ªùi gian hi·ªán t·∫°i: {}", now);

    // ƒê·ªçc file ·∫£nh
    let image_data = fs::read(path)?;
    let filename = path.file_name()
        .ok_or_else(|| {
            error!("Kh√¥ng th·ªÉ l·∫•y t√™n file");
            "Kh√¥ng th·ªÉ l·∫•y t√™n file"
        })?
        .to_string_lossy()
        .to_string();

    // G·ª≠i tin nh·∫Øn v·ªõi ·∫£nh
    info!("ƒêang g·ª≠i tin nh·∫Øn v·ªõi ·∫£nh...");
    let reply = poise::CreateReply::default()
        .content(format!("üïì T·ª∑ gi√° l√∫c: `{}`", now))
        .attachment(serenity::CreateAttachment::bytes(image_data, filename));
    
    ctx.send(reply).await?;
    info!("ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng");

    // X√≥a file ·∫£nh t·∫°m
    info!("ƒêang x√≥a file ·∫£nh t·∫°m...");
    std::fs::remove_file(path)?;
    info!("ƒê√£ x√≥a file ·∫£nh t·∫°m");

    Ok(())
}

#[tokio::main]
async fn main() -> Result<(), Error> {
    // T·∫°o th∆∞ m·ª•c logs n·∫øu ch∆∞a t·ªìn t·∫°i
    fs::create_dir_all("logs")?;

    // Kh·ªüi t·∫°o logger
    log4rs::init_file("log4rs.yaml", Default::default())?;
    info!("ƒêang kh·ªüi ƒë·ªông bot...");

    // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
    dotenv().ok();
    let token = env::var("DISCORD_TOKEN")
        .map_err(|_| {
            error!("Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong file .env");
            "Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong file .env"
        })?;
    
    let channel_id = env::var("CHANNEL_ID")
        .map_err(|_| {
            error!("Kh√¥ng t√¨m th·∫•y CHANNEL_ID trong file .env");
            "Kh√¥ng t√¨m th·∫•y CHANNEL_ID trong file .env"
        })?;

    let intents = serenity::GatewayIntents::non_privileged() | 
                 serenity::GatewayIntents::MESSAGE_CONTENT;

    let framework = poise::Framework::builder()
        .options(poise::FrameworkOptions {
            commands: vec![tygia()],
            prefix_options: poise::PrefixFrameworkOptions {
                prefix: Some("!".into()),
                ..Default::default()
            },
            ..Default::default()
        })
        .setup(move |ctx, _ready, _framework| {
            let channel_id = channel_id.clone();
            Box::pin(async move {
                info!("Bot ƒë√£ s·∫µn s√†ng!");
                
                // G·ª≠i tin nh·∫Øn th√¥ng b√°o khi bot kh·ªüi ƒë·ªông
                if let Ok(channel_id) = channel_id.parse::<u64>() {
                    let channel = serenity::ChannelId::new(channel_id);
                    info!("ƒêang g·ª≠i tin nh·∫Øn th√¥ng b√°o ƒë·∫øn channel {}", channel_id);
                    
                    let builder = serenity::CreateMessage::new()
                        .content("ü§ñ Bot ƒë√£ s·∫µn s√†ng! S·ª≠ d·ª•ng l·ªánh `!tygia` ƒë·ªÉ ch·ª•p m√†n h√¨nh.");
                    
                    if let Err(e) = channel.send_message(&ctx.http, builder).await {
                        error!("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn channel: {}", e);
                    } else {
                        info!("ƒê√£ g·ª≠i tin nh·∫Øn th√¥ng b√°o th√†nh c√¥ng");
                    }
                } else {
                    error!("Channel ID kh√¥ng h·ª£p l·ªá: {}", channel_id);
                }
                
                Ok(Data {})
            })
        })
        .build();

    let mut client = serenity::ClientBuilder::new(token, intents)
        .framework(framework)
        .await?;
    
    client.start().await?;

    Ok(())
}
