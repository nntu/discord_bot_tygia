use poise::serenity_prelude::{AttachmentType, GatewayIntents, ChannelId};
use chrono::Local;
use dotenv::dotenv;
use image::ImageBuffer;
use screenshots::Screen;
use std::{env, path::Path, error::Error};
use log::{info, error, warn};

type Context<'a> = poise::Context<'a, (), Box<dyn Error + Send + Sync>>;

/// L·ªánh !tygia - ch·ª•p m√†n h√¨nh v√† g·ª≠i k√®m th·ªùi gian
#[poise::command(prefix_command, slash_command = false)]
async fn tygia(ctx: Context<'_>) -> Result<(), Box<dyn Error + Send + Sync>> {
    info!("Nh·∫≠n l·ªánh !tygia t·ª´ user {}", ctx.author().name);
    
    // Ch·ª•p m√†n h√¨nh
    info!("ƒêang ch·ª•p m√†n h√¨nh...");
    let screens = Screen::all()
        .map_err(|e| {
            error!("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√†n h√¨nh: {}", e);
            format!("Kh√¥ng th·ªÉ l·∫•y th√¥ng tin m√†n h√¨nh: {}", e)
        })?;
    let screen = screens.get(0)
        .ok_or_else(|| {
            error!("Kh√¥ng t√¨m th·∫•y m√†n h√¨nh");
            "Kh√¥ng t√¨m th·∫•y m√†n h√¨nh"
        })?;
    
    let image = screen.capture()
        .map_err(|e| {
            error!("Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh: {}", e);
            format!("Kh√¥ng th·ªÉ ch·ª•p m√†n h√¨nh: {}", e)
        })?;
    
    let width = image.width();
    let height = image.height();
    info!("ƒê√£ ch·ª•p m√†n h√¨nh v·ªõi k√≠ch th∆∞·ªõc {}x{}", width, height);
    
    let samples = image.as_flat_samples();
    let rgba = samples.as_slice().to_vec();

    // T·∫°o buffer ·∫£nh
    let buffer: ImageBuffer<image::Rgba<u8>, _> = ImageBuffer::from_raw(width, height, rgba)
        .ok_or_else(|| {
            error!("Kh√¥ng th·ªÉ t·∫°o buffer ·∫£nh");
            "Kh√¥ng th·ªÉ t·∫°o buffer ·∫£nh"
        })?;

    // L∆∞u ·∫£nh t·∫°m th·ªùi
    let path = Path::new("screenshot.png");
    info!("ƒêang l∆∞u ·∫£nh v√†o {}", path.display());
    buffer.save(path)?;

    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    let now = Local::now().format("%Y-%m-%d %H:%M:%S").to_string();
    info!("Th·ªùi gian hi·ªán t·∫°i: {}", now);

    // G·ª≠i tin nh·∫Øn v·ªõi ·∫£nh
    info!("ƒêang g·ª≠i tin nh·∫Øn v·ªõi ·∫£nh...");
    ctx.send(|m| {
        m.content(format!("üïì T·ª∑ gi√° l√∫c: `{}`", now))
         .attachment(AttachmentType::Path(path))
    })
    .await?;
    info!("ƒê√£ g·ª≠i tin nh·∫Øn th√†nh c√¥ng");

    // X√≥a file ·∫£nh t·∫°m
    info!("ƒêang x√≥a file ·∫£nh t·∫°m...");
    std::fs::remove_file(path)?;
    info!("ƒê√£ x√≥a file ·∫£nh t·∫°m");

    Ok(())
}

#[tokio::main]
async fn main() -> Result<(), Box<dyn Error + Send + Sync>> {
    // Kh·ªüi t·∫°o logger
    env_logger::init();
    info!("ƒêang kh·ªüi ƒë·ªông bot...");

    // Load bi·∫øn m√¥i tr∆∞·ªùng t·ª´ file .env
    dotenv().ok();
    let token = env::var("DISCORD_TOKEN")
        .map_err(|_| {
            error!("Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong file .env");
            "Kh√¥ng t√¨m th·∫•y DISCORD_TOKEN trong file .env"
        })?;
    
    let channel_id = env::var("CHANNEL_ID")
        .map_err(|_| {
            error!("Kh√¥ng t√¨m th·∫•y CHANNEL_ID trong file .env");
            "Kh√¥ng t√¨m th·∫•y CHANNEL_ID trong file .env"
        })?;

    // C·∫•u h√¨nh bot
    info!("ƒêang c·∫•u h√¨nh bot...");
    let options: poise::FrameworkOptions<(), Box<dyn Error + Send + Sync>> = poise::FrameworkOptions {
        commands: vec![tygia()],
        prefix_options: poise::PrefixFrameworkOptions {
            prefix: Some("!".into()),
            ..Default::default()
        },
        ..Default::default()
    };

    // Kh·ªüi ƒë·ªông bot
    info!("ƒêang k·∫øt n·ªëi v·ªõi Discord...");
    poise::Framework::builder()
        .options(options)
        .token(token)
        .intents(
            GatewayIntents::non_privileged() | 
            GatewayIntents::MESSAGE_CONTENT
        )
        .setup(move |ctx, _ready, _framework| {
            let channel_id = channel_id.clone();
            Box::pin(async move {
                info!("Bot ƒë√£ s·∫µn s√†ng!");
                
                // G·ª≠i tin nh·∫Øn th√¥ng b√°o khi bot kh·ªüi ƒë·ªông
                if let Ok(channel_id) = channel_id.parse::<u64>() {
                    let channel = ChannelId(channel_id);
                    info!("ƒêang g·ª≠i tin nh·∫Øn th√¥ng b√°o ƒë·∫øn channel {}", channel_id);
                    if let Err(e) = channel.send_message(&ctx.http, |m| {
                        m.content("ü§ñ Bot ƒë√£ s·∫µn s√†ng! S·ª≠ d·ª•ng l·ªánh `!tygia` ƒë·ªÉ ch·ª•p m√†n h√¨nh.")
                    }).await {
                        error!("Kh√¥ng th·ªÉ g·ª≠i tin nh·∫Øn ƒë·∫øn channel: {}", e);
                    } else {
                        info!("ƒê√£ g·ª≠i tin nh·∫Øn th√¥ng b√°o th√†nh c√¥ng");
                    }
                } else {
                    error!("Channel ID kh√¥ng h·ª£p l·ªá: {}", channel_id);
                }
                
                Ok(())
            })
        })
        .run()
        .await?;

    Ok(())
}
